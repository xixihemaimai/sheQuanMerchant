// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufPacket.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ProtobufPacket.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DLMMessageHeader);

#pragma mark - DLMProtobufPacketRoot

@implementation DLMProtobufPacketRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - DLMProtobufPacketRoot_FileDescriptor

static GPBFileDescriptor *DLMProtobufPacketRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.github.ld.chat.protobuf"
                                                 objcPrefix:@"DLM"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DLMPacketInfo

@implementation DLMPacketInfo

@dynamic hasHeader, header;
@dynamic ackId;
@dynamic msgId;
@dynamic status;
@dynamic eventType;
@dynamic nsp;
@dynamic hasData_p, data_p;
@dynamic hasMsg, msg;

typedef struct DLMPacketInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int32_t eventType;
  DLMMessageHeader *header;
  NSString *nsp;
  NSData *data_p;
  NSString *msg;
  uint64_t ackId;
  uint64_t msgId;
} DLMPacketInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.clazz = GPBObjCClass(DLMMessageHeader),
        .number = DLMPacketInfo_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMPacketInfo__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ackId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMPacketInfo_FieldNumber_AckId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMPacketInfo__storage_, ackId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMPacketInfo_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMPacketInfo__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMPacketInfo_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMPacketInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "eventType",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMPacketInfo_FieldNumber_EventType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DLMPacketInfo__storage_, eventType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nsp",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMPacketInfo_FieldNumber_Nsp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DLMPacketInfo__storage_, nsp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMPacketInfo_FieldNumber_Data_p,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DLMPacketInfo__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMPacketInfo_FieldNumber_Msg,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DLMPacketInfo__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMPacketInfo class]
                                     rootClass:[DLMProtobufPacketRoot class]
                                          file:DLMProtobufPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMPacketInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\005\000\003\005\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMMessageHeader

@implementation DLMMessageHeader

@dynamic accessToken;
@dynamic versionId;
@dynamic nonce;
@dynamic ts;
@dynamic appId;
@dynamic appVer;
@dynamic deviceId;
@dynamic sign;

typedef struct DLMMessageHeader__storage_ {
  uint32_t _has_storage_[1];
  NSString *accessToken;
  NSString *versionId;
  NSString *appId;
  NSString *appVer;
  NSString *deviceId;
  NSString *sign;
  uint64_t nonce;
  uint64_t ts;
} DLMMessageHeader__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMessageHeader_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMMessageHeader__storage_, accessToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "versionId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMessageHeader_FieldNumber_VersionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMMessageHeader__storage_, versionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nonce",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMessageHeader_FieldNumber_Nonce,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMMessageHeader__storage_, nonce),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "ts",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMessageHeader_FieldNumber_Ts,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMMessageHeader__storage_, ts),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMessageHeader_FieldNumber_AppId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DLMMessageHeader__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appVer",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMessageHeader_FieldNumber_AppVer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DLMMessageHeader__storage_, appVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMessageHeader_FieldNumber_DeviceId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DLMMessageHeader__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMessageHeader_FieldNumber_Sign,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DLMMessageHeader__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMMessageHeader class]
                                     rootClass:[DLMProtobufPacketRoot class]
                                          file:DLMProtobufPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMMessageHeader__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\013\000\002\t\000\005\005\000\006\006\000\007\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMHandshake

@implementation DLMHandshake

@dynamic handshakeTime;

typedef struct DLMHandshake__storage_ {
  uint32_t _has_storage_[1];
  uint64_t handshakeTime;
} DLMHandshake__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handshakeTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMHandshake_FieldNumber_HandshakeTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMHandshake__storage_, handshakeTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMHandshake class]
                                     rootClass:[DLMProtobufPacketRoot class]
                                          file:DLMProtobufPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMHandshake__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMPingInfo

@implementation DLMPingInfo

@dynamic pingTime;

typedef struct DLMPingInfo__storage_ {
  uint32_t _has_storage_[1];
  uint64_t pingTime;
} DLMPingInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pingTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMPingInfo_FieldNumber_PingTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMPingInfo__storage_, pingTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMPingInfo class]
                                     rootClass:[DLMProtobufPacketRoot class]
                                          file:DLMProtobufPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMPingInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMConnectInfo

@implementation DLMConnectInfo

@dynamic connectTime;

typedef struct DLMConnectInfo__storage_ {
  uint32_t _has_storage_[1];
  uint64_t connectTime;
} DLMConnectInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMConnectInfo_FieldNumber_ConnectTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMConnectInfo__storage_, connectTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMConnectInfo class]
                                     rootClass:[DLMProtobufPacketRoot class]
                                          file:DLMProtobufPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMConnectInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMCloseInfo

@implementation DLMCloseInfo

@dynamic closeTime;

typedef struct DLMCloseInfo__storage_ {
  uint32_t _has_storage_[1];
  uint64_t closeTime;
} DLMCloseInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "closeTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMCloseInfo_FieldNumber_CloseTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMCloseInfo__storage_, closeTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMCloseInfo class]
                                     rootClass:[DLMProtobufPacketRoot class]
                                          file:DLMProtobufPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMCloseInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMDisconnectInfo

@implementation DLMDisconnectInfo

@dynamic discTime;

typedef struct DLMDisconnectInfo__storage_ {
  uint32_t _has_storage_[1];
  uint64_t discTime;
} DLMDisconnectInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "discTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMDisconnectInfo_FieldNumber_DiscTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMDisconnectInfo__storage_, discTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMDisconnectInfo class]
                                     rootClass:[DLMProtobufPacketRoot class]
                                          file:DLMProtobufPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMDisconnectInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMUpgradeInfo

@implementation DLMUpgradeInfo

@dynamic upgradeTime;

typedef struct DLMUpgradeInfo__storage_ {
  uint32_t _has_storage_[1];
  uint64_t upgradeTime;
} DLMUpgradeInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "upgradeTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUpgradeInfo_FieldNumber_UpgradeTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMUpgradeInfo__storage_, upgradeTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMUpgradeInfo class]
                                     rootClass:[DLMProtobufPacketRoot class]
                                          file:DLMProtobufPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMUpgradeInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMAck

@implementation DLMAck

@dynamic ackMsgId;
@dynamic msgId;
@dynamic status;
@dynamic ackType;
@dynamic msg;

typedef struct DLMAck__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int32_t ackType;
  NSString *msg;
  uint64_t ackMsgId;
  uint64_t msgId;
} DLMAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ackMsgId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMAck_FieldNumber_AckMsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMAck__storage_, ackMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMAck_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMAck__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMAck_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMAck__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ackType",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMAck_FieldNumber_AckType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMAck__storage_, ackType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMAck_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DLMAck__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMAck class]
                                     rootClass:[DLMProtobufPacketRoot class]
                                          file:DLMProtobufPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMAck__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\005\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
