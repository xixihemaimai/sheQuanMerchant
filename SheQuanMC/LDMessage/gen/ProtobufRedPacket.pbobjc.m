// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufRedPacket.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ProtobufRedPacket.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DLMRedPacketRsp);
GPBObjCClassDeclaration(DLMUserRedPacketRsp);

#pragma mark - DLMProtobufRedPacketRoot

@implementation DLMProtobufRedPacketRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - DLMProtobufRedPacketRoot_FileDescriptor

static GPBFileDescriptor *DLMProtobufRedPacketRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.github.ld.chat.protobuf"
                                                 objcPrefix:@"DLM"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DLMSendRedPacketReq

@implementation DLMSendRedPacketReq

@dynamic msgId;
@dynamic targetType;
@dynamic targetId;
@dynamic payId;
@dynamic payPwd;
@dynamic redPacketType;
@dynamic amount;
@dynamic quantity;
@dynamic bestWishes;
@dynamic cover;
@dynamic appId;
@dynamic deviceId;

typedef struct DLMSendRedPacketReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t targetType;
  int32_t redPacketType;
  float amount;
  int32_t quantity;
  NSString *payPwd;
  NSString *bestWishes;
  NSString *cover;
  NSString *appId;
  NSString *deviceId;
  uint64_t msgId;
  uint64_t targetId;
  uint64_t payId;
} DLMSendRedPacketReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "targetType",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_TargetType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, targetType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_TargetId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "payId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_PayId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, payId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "payPwd",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_PayPwd,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, payPwd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "redPacketType",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_RedPacketType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, redPacketType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_Amount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, amount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "quantity",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_Quantity,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, quantity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bestWishes",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_BestWishes,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, bestWishes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cover",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_Cover,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, cover),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_AppId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketReq_FieldNumber_DeviceId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(DLMSendRedPacketReq__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMSendRedPacketReq class]
                                     rootClass:[DLMProtobufRedPacketRoot class]
                                          file:DLMProtobufRedPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMSendRedPacketReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001\005\000\002\n\000\003\010\000\004\005\000\005\006\000\006\r\000\t\n\000\013\005\000\014\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMSnatchRedPacketReq

@implementation DLMSnatchRedPacketReq

@dynamic redPacketId;
@dynamic deviceId;

typedef struct DLMSnatchRedPacketReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *deviceId;
  uint64_t redPacketId;
} DLMSnatchRedPacketReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redPacketId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSnatchRedPacketReq_FieldNumber_RedPacketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMSnatchRedPacketReq__storage_, redPacketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSnatchRedPacketReq_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMSnatchRedPacketReq__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMSnatchRedPacketReq class]
                                     rootClass:[DLMProtobufRedPacketRoot class]
                                          file:DLMProtobufRedPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMSnatchRedPacketReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMDismantleRedPacketReq

@implementation DLMDismantleRedPacketReq

@dynamic redPacketId;
@dynamic authId;
@dynamic timeStamp;
@dynamic deviceId;

typedef struct DLMDismantleRedPacketReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *authId;
  NSString *deviceId;
  uint64_t redPacketId;
  uint64_t timeStamp;
} DLMDismantleRedPacketReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redPacketId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMDismantleRedPacketReq_FieldNumber_RedPacketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMDismantleRedPacketReq__storage_, redPacketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "authId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMDismantleRedPacketReq_FieldNumber_AuthId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMDismantleRedPacketReq__storage_, authId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMDismantleRedPacketReq_FieldNumber_TimeStamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMDismantleRedPacketReq__storage_, timeStamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMDismantleRedPacketReq_FieldNumber_DeviceId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMDismantleRedPacketReq__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMDismantleRedPacketReq class]
                                     rootClass:[DLMProtobufRedPacketRoot class]
                                          file:DLMProtobufRedPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMDismantleRedPacketReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\002\006\000\003\t\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMRedPacketListReq

@implementation DLMRedPacketListReq

@dynamic redPacketId;
@dynamic authId;
@dynamic timeStamp;

typedef struct DLMRedPacketListReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *authId;
  uint64_t redPacketId;
  uint64_t timeStamp;
} DLMRedPacketListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redPacketId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketListReq_FieldNumber_RedPacketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMRedPacketListReq__storage_, redPacketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "authId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketListReq_FieldNumber_AuthId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMRedPacketListReq__storage_, authId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketListReq_FieldNumber_TimeStamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMRedPacketListReq__storage_, timeStamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMRedPacketListReq class]
                                     rootClass:[DLMProtobufRedPacketRoot class]
                                          file:DLMProtobufRedPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMRedPacketListReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\002\006\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMRedPacketRsp

@implementation DLMRedPacketRsp

@dynamic userId;
@dynamic redPacketId;
@dynamic redPacketType;
@dynamic redPacketTitle;
@dynamic headImg;
@dynamic authId;
@dynamic timeStamp;
@dynamic claimStatus;
@dynamic claimAmount;
@dynamic amountUnit;
@dynamic copywriting;
@dynamic showProgress;
@dynamic showDetails;
@dynamic jumpDetailPage;

typedef struct DLMRedPacketRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t redPacketType;
  int32_t claimStatus;
  NSString *redPacketTitle;
  NSString *headImg;
  NSString *authId;
  NSString *claimAmount;
  NSString *amountUnit;
  NSString *copywriting;
  NSString *showProgress;
  uint64_t userId;
  uint64_t redPacketId;
  uint64_t timeStamp;
} DLMRedPacketRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "redPacketId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_RedPacketId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, redPacketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "redPacketType",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_RedPacketType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, redPacketType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "redPacketTitle",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_RedPacketTitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, redPacketTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImg",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_HeadImg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, headImg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_AuthId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, authId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_TimeStamp,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, timeStamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "claimStatus",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_ClaimStatus,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, claimStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "claimAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_ClaimAmount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, claimAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amountUnit",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_AmountUnit,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, amountUnit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "copywriting",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_Copywriting,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, copywriting),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showProgress",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_ShowProgress,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(DLMRedPacketRsp__storage_, showProgress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showDetails",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_ShowDetails,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "jumpDetailPage",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketRsp_FieldNumber_JumpDetailPage,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMRedPacketRsp class]
                                     rootClass:[DLMProtobufRedPacketRoot class]
                                          file:DLMProtobufRedPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMRedPacketRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\r\001\006\000\002\013\000\003\r\000\004\016\000\005\007\000\006\006\000\007\t\000\010\013\000\t\013\000\n\n\000\014\014\000\r\013\000\016\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMSendRedPacketRsp

@implementation DLMSendRedPacketRsp

@dynamic redPacketId;
@dynamic msgId;
@dynamic bestWishes;
@dynamic cover;

typedef struct DLMSendRedPacketRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *bestWishes;
  NSString *cover;
  uint64_t redPacketId;
  uint64_t msgId;
} DLMSendRedPacketRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redPacketId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketRsp_FieldNumber_RedPacketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMSendRedPacketRsp__storage_, redPacketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketRsp_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMSendRedPacketRsp__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bestWishes",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketRsp_FieldNumber_BestWishes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMSendRedPacketRsp__storage_, bestWishes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cover",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSendRedPacketRsp_FieldNumber_Cover,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMSendRedPacketRsp__storage_, cover),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMSendRedPacketRsp class]
                                     rootClass:[DLMProtobufRedPacketRoot class]
                                          file:DLMProtobufRedPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMSendRedPacketRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\002\005\000\003\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMRedPacketDetailInfoRsp

@implementation DLMRedPacketDetailInfoRsp

@dynamic hasRedPacket, redPacket;
@dynamic userRedPacketsArray, userRedPacketsArray_Count;

typedef struct DLMRedPacketDetailInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  DLMRedPacketRsp *redPacket;
  NSMutableArray *userRedPacketsArray;
} DLMRedPacketDetailInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redPacket",
        .dataTypeSpecific.clazz = GPBObjCClass(DLMRedPacketRsp),
        .number = DLMRedPacketDetailInfoRsp_FieldNumber_RedPacket,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMRedPacketDetailInfoRsp__storage_, redPacket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userRedPacketsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DLMUserRedPacketRsp),
        .number = DLMRedPacketDetailInfoRsp_FieldNumber_UserRedPacketsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DLMRedPacketDetailInfoRsp__storage_, userRedPacketsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMRedPacketDetailInfoRsp class]
                                     rootClass:[DLMProtobufRedPacketRoot class]
                                          file:DLMProtobufRedPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMRedPacketDetailInfoRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\000userRedPackets\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMUserRedPacketRsp

@implementation DLMUserRedPacketRsp

@dynamic redPacketId;
@dynamic nickName;
@dynamic headImg;
@dynamic claimAmount;
@dynamic amountUnit;
@dynamic claimTime;
@dynamic best;

typedef struct DLMUserRedPacketRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *headImg;
  NSString *claimAmount;
  NSString *amountUnit;
  NSString *claimTime;
  uint64_t redPacketId;
} DLMUserRedPacketRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redPacketId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserRedPacketRsp_FieldNumber_RedPacketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMUserRedPacketRsp__storage_, redPacketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserRedPacketRsp_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMUserRedPacketRsp__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImg",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserRedPacketRsp_FieldNumber_HeadImg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMUserRedPacketRsp__storage_, headImg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "claimAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserRedPacketRsp_FieldNumber_ClaimAmount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMUserRedPacketRsp__storage_, claimAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amountUnit",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserRedPacketRsp_FieldNumber_AmountUnit,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DLMUserRedPacketRsp__storage_, amountUnit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "claimTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserRedPacketRsp_FieldNumber_ClaimTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DLMUserRedPacketRsp__storage_, claimTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "best",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserRedPacketRsp_FieldNumber_Best,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMUserRedPacketRsp class]
                                     rootClass:[DLMProtobufRedPacketRoot class]
                                          file:DLMProtobufRedPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMUserRedPacketRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\013\000\002\010\000\003\007\000\004\013\000\005\n\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMAckRedPacketInfo

@implementation DLMAckRedPacketInfo

@dynamic redPacketId;
@dynamic msg;

typedef struct DLMAckRedPacketInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
  uint64_t redPacketId;
} DLMAckRedPacketInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redPacketId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMAckRedPacketInfo_FieldNumber_RedPacketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMAckRedPacketInfo__storage_, redPacketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMAckRedPacketInfo_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMAckRedPacketInfo__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMAckRedPacketInfo class]
                                     rootClass:[DLMProtobufRedPacketRoot class]
                                          file:DLMProtobufRedPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMAckRedPacketInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMRedPacketMsgInfo

@implementation DLMRedPacketMsgInfo

@dynamic redPacketId;
@dynamic userId;
@dynamic faceURL;
@dynamic userName;
@dynamic mobile;
@dynamic claimAmount;
@dynamic merchantNo;
@dynamic tradeName;
@dynamic tradeDesc;
@dynamic payId;

typedef struct DLMRedPacketMsgInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t claimAmount;
  NSString *faceURL;
  NSString *userName;
  NSString *mobile;
  NSString *merchantNo;
  NSString *tradeName;
  NSString *tradeDesc;
  uint64_t redPacketId;
  uint64_t userId;
  uint64_t payId;
} DLMRedPacketMsgInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redPacketId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketMsgInfo_FieldNumber_RedPacketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMRedPacketMsgInfo__storage_, redPacketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketMsgInfo_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMRedPacketMsgInfo__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "faceURL",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketMsgInfo_FieldNumber_FaceURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMRedPacketMsgInfo__storage_, faceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketMsgInfo_FieldNumber_UserName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMRedPacketMsgInfo__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobile",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketMsgInfo_FieldNumber_Mobile,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DLMRedPacketMsgInfo__storage_, mobile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "claimAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketMsgInfo_FieldNumber_ClaimAmount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DLMRedPacketMsgInfo__storage_, claimAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "merchantNo",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketMsgInfo_FieldNumber_MerchantNo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DLMRedPacketMsgInfo__storage_, merchantNo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tradeName",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketMsgInfo_FieldNumber_TradeName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DLMRedPacketMsgInfo__storage_, tradeName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tradeDesc",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketMsgInfo_FieldNumber_TradeDesc,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(DLMRedPacketMsgInfo__storage_, tradeDesc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRedPacketMsgInfo_FieldNumber_PayId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(DLMRedPacketMsgInfo__storage_, payId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMRedPacketMsgInfo class]
                                     rootClass:[DLMProtobufRedPacketRoot class]
                                          file:DLMProtobufRedPacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMRedPacketMsgInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001\013\000\002\006\000\003\005!!\000\004\010\000\006\013\000\007\n\000\010\t\000\t\t\000\n\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
