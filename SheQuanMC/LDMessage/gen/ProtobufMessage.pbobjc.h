// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DLMContactCardMsgReq;
@class DLMFileMsgReq;
@class DLMGifMsgReq;
@class DLMImgMsgReq;
@class DLMImgTextMsgReq;
@class DLMLbsMsgReq;
@class DLMMessageLiteReq;
@class DLMOffLineMsgRsp;
@class DLMRedPacketMsgReq;
@class DLMRemindMsgReq;
@class DLMSightMsgReq;
@class DLMTextMsgReq;
@class DLMVcMsgReq;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - DLMProtobufMessageRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface DLMProtobufMessageRoot : GPBRootObject
@end

#pragma mark - DLMMessageLiteReq

typedef GPB_ENUM(DLMMessageLiteReq_FieldNumber) {
  DLMMessageLiteReq_FieldNumber_MsgId = 1,
  DLMMessageLiteReq_FieldNumber_FromUserId = 2,
  DLMMessageLiteReq_FieldNumber_TargetId = 3,
  DLMMessageLiteReq_FieldNumber_PushType = 4,
  DLMMessageLiteReq_FieldNumber_NotifyType = 5,
  DLMMessageLiteReq_FieldNumber_SendTime = 6,
  DLMMessageLiteReq_FieldNumber_EventType = 7,
  DLMMessageLiteReq_FieldNumber_PreMsgId = 8,
  DLMMessageLiteReq_FieldNumber_TextMsg = 10,
  DLMMessageLiteReq_FieldNumber_ImgMsg = 11,
  DLMMessageLiteReq_FieldNumber_VcMsg = 12,
  DLMMessageLiteReq_FieldNumber_GifMsg = 13,
  DLMMessageLiteReq_FieldNumber_ImgTextMsg = 14,
  DLMMessageLiteReq_FieldNumber_FileMsg = 15,
  DLMMessageLiteReq_FieldNumber_LbsMsg = 16,
  DLMMessageLiteReq_FieldNumber_SightMsg = 17,
  DLMMessageLiteReq_FieldNumber_RedPacketMsg = 18,
  DLMMessageLiteReq_FieldNumber_RemindMsg = 19,
  DLMMessageLiteReq_FieldNumber_ContactCardMsg = 20,
};

typedef GPB_ENUM(DLMMessageLiteReq_MsgBody_OneOfCase) {
  DLMMessageLiteReq_MsgBody_OneOfCase_GPBUnsetOneOfCase = 0,
  DLMMessageLiteReq_MsgBody_OneOfCase_TextMsg = 10,
  DLMMessageLiteReq_MsgBody_OneOfCase_ImgMsg = 11,
  DLMMessageLiteReq_MsgBody_OneOfCase_VcMsg = 12,
  DLMMessageLiteReq_MsgBody_OneOfCase_GifMsg = 13,
  DLMMessageLiteReq_MsgBody_OneOfCase_ImgTextMsg = 14,
  DLMMessageLiteReq_MsgBody_OneOfCase_FileMsg = 15,
  DLMMessageLiteReq_MsgBody_OneOfCase_LbsMsg = 16,
  DLMMessageLiteReq_MsgBody_OneOfCase_SightMsg = 17,
  DLMMessageLiteReq_MsgBody_OneOfCase_RedPacketMsg = 18,
  DLMMessageLiteReq_MsgBody_OneOfCase_RemindMsg = 19,
  DLMMessageLiteReq_MsgBody_OneOfCase_ContactCardMsg = 20,
};

/**
 * 短消息基础信息
 **/
GPB_FINAL @interface DLMMessageLiteReq : GPBMessage

/** 客户端消息Id */
@property(nonatomic, readwrite) uint64_t msgId;

/** 消息发送方userId */
@property(nonatomic, readwrite) uint64_t fromUserId;

/** 消息接收方(userId、groupId) */
@property(nonatomic, readwrite) uint64_t targetId;

/** 推送消息类型(1：Single、2：Group、3：Broadcast) */
@property(nonatomic, readwrite) int32_t pushType;

/** 通知类型(0：普通消息、1：通知、2：群公告) */
@property(nonatomic, readwrite) int32_t notifyType;

/** 发送时间 */
@property(nonatomic, readwrite) uint64_t sendTime;

/** 参照 com.github.yi.chat.socket.model.enums.EventType */
@property(nonatomic, readwrite) int32_t eventType;

/** 上一条消息Id */
@property(nonatomic, readwrite) uint64_t preMsgId;

/** 消息体 */
@property(nonatomic, readonly) DLMMessageLiteReq_MsgBody_OneOfCase msgBodyOneOfCase;

/** 文字消息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMTextMsgReq *textMsg;

/** 图片消息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMImgMsgReq *imgMsg;

/** 语音消息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMVcMsgReq *vcMsg;

/** GIF 图片消息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMGifMsgReq *gifMsg;

/** 图文消息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMImgTextMsgReq *imgTextMsg;

/** 文件消息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMFileMsgReq *fileMsg;

/** 位置消息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMLbsMsgReq *lbsMsg;

/** 小视频消息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMSightMsgReq *sightMsg;

/** 红包消息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMRedPacketMsgReq *redPacketMsg;

/** 提醒消息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMRemindMsgReq *remindMsg;

/** 个人名片信息 */
@property(nonatomic, readwrite, strong, null_resettable) DLMContactCardMsgReq *contactCardMsg;

@end

/**
 * Clears whatever value was set for the oneof 'msgBody'.
 **/
void DLMMessageLiteReq_ClearMsgBodyOneOfCase(DLMMessageLiteReq *message);

#pragma mark - DLMLocalMsgReq

typedef GPB_ENUM(DLMLocalMsgReq_FieldNumber) {
  DLMLocalMsgReq_FieldNumber_OpenId = 1,
  DLMLocalMsgReq_FieldNumber_TargetId = 2,
  DLMLocalMsgReq_FieldNumber_AckId = 3,
  DLMLocalMsgReq_FieldNumber_MsgId = 4,
  DLMLocalMsgReq_FieldNumber_MessageLite = 5,
  DLMLocalMsgReq_FieldNumber_SendTime = 6,
};

/**
 *
 **/
GPB_FINAL @interface DLMLocalMsgReq : GPBMessage

/** OpendId */
@property(nonatomic, readwrite, copy, null_resettable) NSString *openId;

/** targetId */
@property(nonatomic, readwrite, copy, null_resettable) NSString *targetId;

/** ackId */
@property(nonatomic, readwrite) uint64_t ackId;

/** 消息Id */
@property(nonatomic, readwrite) uint64_t msgId;

/** 消息内容 */
@property(nonatomic, readwrite, strong, null_resettable) DLMMessageLiteReq *messageLite;
/** Test to see if @c messageLite has been set. */
@property(nonatomic, readwrite) BOOL hasMessageLite;

/** 发送时间 */
@property(nonatomic, readwrite) uint64_t sendTime;

@end

#pragma mark - DLMOffLineMsgListReq

typedef GPB_ENUM(DLMOffLineMsgListReq_FieldNumber) {
  DLMOffLineMsgListReq_FieldNumber_LastOffLineId = 1,
};

/**
 * 离线消息列表（EventType.OffLineMsgList）
 **/
GPB_FINAL @interface DLMOffLineMsgListReq : GPBMessage

/** 取最后一条离线Id */
@property(nonatomic, readwrite) uint64_t lastOffLineId;

@end

#pragma mark - DLMOffLineMsgListRsp

typedef GPB_ENUM(DLMOffLineMsgListRsp_FieldNumber) {
  DLMOffLineMsgListRsp_FieldNumber_OffLinesArray = 1,
};

/**
 * 拉取离线列表(EventType.OffLineMsgList)
 **/
GPB_FINAL @interface DLMOffLineMsgListRsp : GPBMessage

/** 离线列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DLMOffLineMsgRsp*> *offLinesArray;
/** The number of items in @c offLinesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger offLinesArray_Count;

@end

#pragma mark - DLMOffLineMsgRsp

typedef GPB_ENUM(DLMOffLineMsgRsp_FieldNumber) {
  DLMOffLineMsgRsp_FieldNumber_OffLineId = 1,
  DLMOffLineMsgRsp_FieldNumber_TargetId = 2,
  DLMOffLineMsgRsp_FieldNumber_PullType = 3,
  DLMOffLineMsgRsp_FieldNumber_OffLineType = 4,
};

/**
 * 拉取离线列表
 **/
GPB_FINAL @interface DLMOffLineMsgRsp : GPBMessage

/** */
@property(nonatomic, readwrite) uint64_t offLineId;

/**
 * *
 * 拉取目标对象(UserId、GroupId)
 * 当pullType为1时，UserId
 * 当pullType为2时，GroupId
 **/
@property(nonatomic, readwrite) uint64_t targetId;

/** 拉取消息类型（1：单聊、2：群聊、3：广播） */
@property(nonatomic, readwrite) int32_t pullType;

/**
 * *
 * 离线消息类型(1：基本信息（好友、群）、2：离线消息（好友、群）)
 * 当pullType为1时，且offLineType为1，则获取好友的基本信息
 * 当pullType为1时，且offLineType为2，则获取好友发送的离线消息
 * 当pullType为1时，且offLineType为3（可使用位运算），先获取好友的基本信息，再拉取好友发送的离线消息
 * -----------------------------------------------------------------------------
 * 当pullType为2时，且offLineType为1，则获取群的基本信息、包括群成员
 * 当pullType为2时，且offLineType为2，则获取群发送的离线消息
 * 当pullType为2时，且offLineType为3（可使用位运算），先获取群的基本信息、包括群成员，再拉取群发送的离线消息
 **/
@property(nonatomic, readwrite) int32_t offLineType;

@end

#pragma mark - DLMPullOffLineInfoReq

typedef GPB_ENUM(DLMPullOffLineInfoReq_FieldNumber) {
  DLMPullOffLineInfoReq_FieldNumber_TargetId = 1,
  DLMPullOffLineInfoReq_FieldNumber_PullType = 2,
  DLMPullOffLineInfoReq_FieldNumber_LastMsgId = 3,
};

/**
 * 拉取离线消息(EventType.PullOffLineInfo)
 **/
GPB_FINAL @interface DLMPullOffLineInfoReq : GPBMessage

/**
 * *
 * 拉取目标对象(UserId、GroupId)
 * 当pullType为1时，UserId
 * 当pullType为2时，GroupId
 **/
@property(nonatomic, readwrite) uint64_t targetId;

/** 拉取消息类型（1：单聊、2：群聊、3：广播） */
@property(nonatomic, readwrite) int32_t pullType;

/** 取最后一条消息Id */
@property(nonatomic, readwrite) uint64_t lastMsgId;

@end

#pragma mark - DLMMessageLiteListRsp

typedef GPB_ENUM(DLMMessageLiteListRsp_FieldNumber) {
  DLMMessageLiteListRsp_FieldNumber_MessageLitesArray = 1,
};

/**
 * 拉取消息列表
 **/
GPB_FINAL @interface DLMMessageLiteListRsp : GPBMessage

/** 消息列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DLMMessageLiteReq*> *messageLitesArray;
/** The number of items in @c messageLitesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger messageLitesArray_Count;

@end

#pragma mark - DLMRemindMsgReq

typedef GPB_ENUM(DLMRemindMsgReq_FieldNumber) {
  DLMRemindMsgReq_FieldNumber_RemindId = 1,
  DLMRemindMsgReq_FieldNumber_RemindType = 2,
  DLMRemindMsgReq_FieldNumber_Icon = 3,
  DLMRemindMsgReq_FieldNumber_Content = 4,
  DLMRemindMsgReq_FieldNumber_Ext = 5,
  DLMRemindMsgReq_FieldNumber_UserIdsArray = 6,
};

/**
 * 提醒消息（EventType.RemindMsg）
 **/
GPB_FINAL @interface DLMRemindMsgReq : GPBMessage

/**
 * *
 * 提醒Id
 * 当remindType为2时，该值是红包Id（redPacketId）
 * 当remindType为3时，该值是红包Id（redPacketId）
 * 当remindType为7时，该值是红包Id（redPacketId）
 * 当remindType为8时，该值是红包Id（redPacketId）
 * 当remindType为9时，该值是红包Id（redPacketId）
 **/
@property(nonatomic, readwrite) uint64_t remindId;

/**
 * *
 * 1、文字提醒
 * 2、红包提醒
 * 3、群公告提醒              -- 当ext字段有值时，则显示该字段值（ext）
 * 4、\@提醒
 * 5、被好友加入黑名单        -- 消息已发出，但被对方拒收了。
 * 6、被好友删除             -- 你还不是他(她)的好友,互为好友才能聊天.
 * 7、群主审核提醒           -- 群聊开启进群确认后，群主会收到消息提醒
 * 8、圈子-加入圈子群聊       -- 当ext字段有值时，则显示该字段值（ext）
 * 9、邀请好友入群（二维码邀请群聊）-- 当ext字段有值时，则显示该字段值（ext）
 **/
@property(nonatomic, readwrite) int32_t remindType;

/** 提醒图标 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *icon;

/** 提醒内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

/** 扩展字段 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *ext;

/** 用户Id */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *userIdsArray;
/** The number of items in @c userIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger userIdsArray_Count;

@end

#pragma mark - DLMTextMsgReq

typedef GPB_ENUM(DLMTextMsgReq_FieldNumber) {
  DLMTextMsgReq_FieldNumber_Content = 1,
  DLMTextMsgReq_FieldNumber_AtUserIdsArray = 2,
};

/**
 * 文字消息（EventType.TextMsg）
 **/
GPB_FINAL @interface DLMTextMsgReq : GPBMessage

/** 文字消息的文字内容，包括表情。 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

/**
 * *
 * atUserIds 使用注意事项：
 * 需要 \@ 的用户列表，如果需要 \@ALL(0)，请传入：0
 * 举个例子，假设该条文本消息希望\@提醒 denny(1) 和 lucy(2) 两个用户，同时又希望\@所有人(0)，atUserIds 传 [0,1,2]
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *atUserIdsArray;
/** The number of items in @c atUserIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger atUserIdsArray_Count;

@end

#pragma mark - DLMImgMsgReq

typedef GPB_ENUM(DLMImgMsgReq_FieldNumber) {
  DLMImgMsgReq_FieldNumber_ThumbURL = 1,
  DLMImgMsgReq_FieldNumber_ImgURL = 2,
  DLMImgMsgReq_FieldNumber_Width = 3,
  DLMImgMsgReq_FieldNumber_Height = 4,
  DLMImgMsgReq_FieldNumber_Size = 5,
};

/**
 * 图片消息（EventType.ImgMsg）
 **/
GPB_FINAL @interface DLMImgMsgReq : GPBMessage

/** 缩略图 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *thumbURL;

/** 原图地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *imgURL;

/** 图片宽度 */
@property(nonatomic, readwrite) int32_t width;

/** 图片高度 */
@property(nonatomic, readwrite) int32_t height;

/** 图片文件大小，单位为字节 Byte */
@property(nonatomic, readwrite) double size;

@end

#pragma mark - DLMVcMsgReq

typedef GPB_ENUM(DLMVcMsgReq_FieldNumber) {
  DLMVcMsgReq_FieldNumber_VoiceURL = 1,
  DLMVcMsgReq_FieldNumber_Duration = 2,
};

/**
 * 语音消息（EventType.VcMsg）
 **/
GPB_FINAL @interface DLMVcMsgReq : GPBMessage

/** 媒体内容上传服务器后的网络地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *voiceURL;

/** 语音消息的时长，最长为 60 秒（单位：秒） */
@property(nonatomic, readwrite) int32_t duration;

@end

#pragma mark - DLMGifMsgReq

typedef GPB_ENUM(DLMGifMsgReq_FieldNumber) {
  DLMGifMsgReq_FieldNumber_ImgURL = 1,
  DLMGifMsgReq_FieldNumber_Width = 2,
  DLMGifMsgReq_FieldNumber_Height = 3,
  DLMGifMsgReq_FieldNumber_Size = 4,
};

/**
 * GIF 图片消息（EventType.GifMsg）
 **/
GPB_FINAL @interface DLMGifMsgReq : GPBMessage

/** 图片的服务器地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *imgURL;

/** 图片宽度 */
@property(nonatomic, readwrite) int32_t width;

/** 图片高度 */
@property(nonatomic, readwrite) int32_t height;

/** 图片文件大小，单位为字节 Byte */
@property(nonatomic, readwrite) double size;

@end

#pragma mark - DLMImgTextMsgReq

typedef GPB_ENUM(DLMImgTextMsgReq_FieldNumber) {
  DLMImgTextMsgReq_FieldNumber_Title = 1,
  DLMImgTextMsgReq_FieldNumber_Content = 2,
  DLMImgTextMsgReq_FieldNumber_Thumbnail = 3,
  DLMImgTextMsgReq_FieldNumber_ImgURL = 4,
  DLMImgTextMsgReq_FieldNumber_LinkURL = 5,
};

/**
 * 图文消息（EventType.ImgTextMsg）
 **/
GPB_FINAL @interface DLMImgTextMsgReq : GPBMessage

/** 消息的标题 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** 消息的文字内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

/** 缩略图地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *thumbnail;

/** 消息中图片地址，图片尺寸为：120 x 120 像素 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *imgURL;

/** 点击图片消息后跳转的 URL 地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *linkURL;

@end

#pragma mark - DLMFileMsgReq

typedef GPB_ENUM(DLMFileMsgReq_FieldNumber) {
  DLMFileMsgReq_FieldNumber_Name = 1,
  DLMFileMsgReq_FieldNumber_Type = 2,
  DLMFileMsgReq_FieldNumber_Size = 3,
  DLMFileMsgReq_FieldNumber_FileURL = 4,
  DLMFileMsgReq_FieldNumber_Unit = 5,
};

/**
 * 文件消息（EventType.FileMsg）
 **/
GPB_FINAL @interface DLMFileMsgReq : GPBMessage

/** 文件名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 文件类型 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *type;

/** 文件大小 */
@property(nonatomic, readwrite) double size;

/** 文件地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fileURL;

/** 单位 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *unit;

@end

#pragma mark - DLMLbsMsgReq

typedef GPB_ENUM(DLMLbsMsgReq_FieldNumber) {
  DLMLbsMsgReq_FieldNumber_Content = 1,
  DLMLbsMsgReq_FieldNumber_Latitude = 2,
  DLMLbsMsgReq_FieldNumber_Longitude = 3,
  DLMLbsMsgReq_FieldNumber_Poi = 4,
};

/**
 * 位置消息（EventType.LbsMsg）
 **/
GPB_FINAL @interface DLMLbsMsgReq : GPBMessage

/** 表示位置图片缩略图，格式为 JPG，以 Base64 进行 Encode 后需要将所有 \\r\\n 和 \\r 和 \\n 替换成空。 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

/** 位置的纬度值 */
@property(nonatomic, readwrite) double latitude;

/** 位置的经度值 */
@property(nonatomic, readwrite) double longitude;

/** 表示位置的 poi 信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *poi;

@end

#pragma mark - DLMSightMsgReq

typedef GPB_ENUM(DLMSightMsgReq_FieldNumber) {
  DLMSightMsgReq_FieldNumber_Name = 1,
  DLMSightMsgReq_FieldNumber_Type = 2,
  DLMSightMsgReq_FieldNumber_Size = 3,
  DLMSightMsgReq_FieldNumber_SightURL = 4,
  DLMSightMsgReq_FieldNumber_Duration = 5,
  DLMSightMsgReq_FieldNumber_SnapshotURL = 6,
  DLMSightMsgReq_FieldNumber_Width = 7,
  DLMSightMsgReq_FieldNumber_Height = 8,
};

/**
 * 小视频消息（EventType.SightMsg）
 **/
GPB_FINAL @interface DLMSightMsgReq : GPBMessage

/** 发送端视频的文件名，小视频文件格式为 MP4 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 视频类型，如 mp4 mov 等 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *type;

/** 视频大小单位 Byte */
@property(nonatomic, readwrite) double size;

/** 上传到文件服务器的小视频地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sightURL;

/** 视频时长，单位：秒 */
@property(nonatomic, readwrite) uint64_t duration;

/** 视频封面图片地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *snapshotURL;

/** 视频封面图片宽度 */
@property(nonatomic, readwrite) int32_t width;

/** 视频封面图片高度 */
@property(nonatomic, readwrite) int32_t height;

@end

#pragma mark - DLMRedPacketMsgReq

typedef GPB_ENUM(DLMRedPacketMsgReq_FieldNumber) {
  DLMRedPacketMsgReq_FieldNumber_RedPacketId = 1,
  DLMRedPacketMsgReq_FieldNumber_BestWishes = 2,
  DLMRedPacketMsgReq_FieldNumber_Cover = 3,
};

/**
 * 红包消息（EventType.RedPacketMsg）
 **/
GPB_FINAL @interface DLMRedPacketMsgReq : GPBMessage

/** 红包Id */
@property(nonatomic, readwrite) uint64_t redPacketId;

/** 红包描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *bestWishes;

/** 红包封面 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cover;

@end

#pragma mark - DLMReadMsgReq

typedef GPB_ENUM(DLMReadMsgReq_FieldNumber) {
  DLMReadMsgReq_FieldNumber_MsgId = 1,
};

/**
 * 已读消息（EventType.ReadMsg）
 **/
GPB_FINAL @interface DLMReadMsgReq : GPBMessage

/** 消息Id */
@property(nonatomic, readwrite) uint64_t msgId;

@end

#pragma mark - DLMRecallMsgReq

typedef GPB_ENUM(DLMRecallMsgReq_FieldNumber) {
  DLMRecallMsgReq_FieldNumber_FromUserId = 1,
  DLMRecallMsgReq_FieldNumber_ToUserId = 2,
  DLMRecallMsgReq_FieldNumber_MsgId = 3,
};

/**
 * 撤回聊天信息（EventType.RecallMsg）
 **/
GPB_FINAL @interface DLMRecallMsgReq : GPBMessage

/** 消息发送方userId */
@property(nonatomic, readwrite) uint64_t fromUserId;

/** 消息接收方用户userId */
@property(nonatomic, readwrite) uint64_t toUserId;

/** 撤回消息Id */
@property(nonatomic, readwrite) uint64_t msgId;

@end

#pragma mark - DLMContactCardMsgReq

typedef GPB_ENUM(DLMContactCardMsgReq_FieldNumber) {
  DLMContactCardMsgReq_FieldNumber_UserId = 1,
  DLMContactCardMsgReq_FieldNumber_NickName = 2,
  DLMContactCardMsgReq_FieldNumber_FaceURL = 3,
  DLMContactCardMsgReq_FieldNumber_RegionName = 4,
  DLMContactCardMsgReq_FieldNumber_Sign = 5,
  DLMContactCardMsgReq_FieldNumber_Card = 6,
};

/**
 * 个人名片信息（EventType.ContactCardMsg）
 **/
GPB_FINAL @interface DLMContactCardMsgReq : GPBMessage

/** 用户Id */
@property(nonatomic, readwrite) uint64_t userId;

/** 用户昵称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nickName;

/** 用户头像 url */
@property(nonatomic, readwrite, copy, null_resettable) NSString *faceURL;

/** 地区名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *regionName;

/** 签名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sign;

/** 默认为：个人名片 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *card;

@end

#pragma mark - DLMSingleMsgInfo

typedef GPB_ENUM(DLMSingleMsgInfo_FieldNumber) {
  DLMSingleMsgInfo_FieldNumber_EventType = 1,
  DLMSingleMsgInfo_FieldNumber_MsgId = 2,
  DLMSingleMsgInfo_FieldNumber_UserId = 3,
  DLMSingleMsgInfo_FieldNumber_FriendUserId = 4,
  DLMSingleMsgInfo_FieldNumber_Data_p = 5,
};

/**
 * Im 单聊消息信息
 **/
GPB_FINAL @interface DLMSingleMsgInfo : GPBMessage

/** 消息类型 */
@property(nonatomic, readwrite) int32_t eventType;

/** 消息Id */
@property(nonatomic, readwrite) uint64_t msgId;

/** 发送UserId */
@property(nonatomic, readwrite) uint64_t userId;

/** 好友UserId */
@property(nonatomic, readwrite) uint64_t friendUserId;

/** 具体序列化的字节数据 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - DLMGroupMsgInfo

typedef GPB_ENUM(DLMGroupMsgInfo_FieldNumber) {
  DLMGroupMsgInfo_FieldNumber_EventType = 1,
  DLMGroupMsgInfo_FieldNumber_MsgId = 2,
  DLMGroupMsgInfo_FieldNumber_UserId = 3,
  DLMGroupMsgInfo_FieldNumber_GroupId = 4,
  DLMGroupMsgInfo_FieldNumber_Data_p = 5,
};

/**
 * Im 群聊消息信息
 **/
GPB_FINAL @interface DLMGroupMsgInfo : GPBMessage

/** 消息类型 */
@property(nonatomic, readwrite) int32_t eventType;

/** 消息Id */
@property(nonatomic, readwrite) uint64_t msgId;

/** UserId */
@property(nonatomic, readwrite) uint64_t userId;

/** 群聊Id */
@property(nonatomic, readwrite) uint64_t groupId;

/** 具体序列化的字节数据 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
