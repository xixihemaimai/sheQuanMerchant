// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufCommon.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ProtobufCommon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DLMReportImageReq);
GPBObjCClassDeclaration(DLMReportSceneInfoRsp);

#pragma mark - DLMProtobufCommonRoot

@implementation DLMProtobufCommonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - DLMProtobufCommonRoot_FileDescriptor

static GPBFileDescriptor *DLMProtobufCommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.github.ld.chat.protobuf"
                                                 objcPrefix:@"DLM"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DLMReportSceneListReq

@implementation DLMReportSceneListReq


typedef struct DLMReportSceneListReq__storage_ {
  uint32_t _has_storage_[1];
} DLMReportSceneListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMReportSceneListReq class]
                                     rootClass:[DLMProtobufCommonRoot class]
                                          file:DLMProtobufCommonRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DLMReportSceneListReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMReportSceneListRsp

@implementation DLMReportSceneListRsp

@dynamic scenesArray, scenesArray_Count;

typedef struct DLMReportSceneListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *scenesArray;
} DLMReportSceneListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scenesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DLMReportSceneInfoRsp),
        .number = DLMReportSceneListRsp_FieldNumber_ScenesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DLMReportSceneListRsp__storage_, scenesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMReportSceneListRsp class]
                                     rootClass:[DLMProtobufCommonRoot class]
                                          file:DLMProtobufCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMReportSceneListRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMReportSceneInfoRsp

@implementation DLMReportSceneInfoRsp

@dynamic reportId;
@dynamic reportName;

typedef struct DLMReportSceneInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t reportId;
  NSString *reportName;
} DLMReportSceneInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reportId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMReportSceneInfoRsp_FieldNumber_ReportId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMReportSceneInfoRsp__storage_, reportId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reportName",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMReportSceneInfoRsp_FieldNumber_ReportName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMReportSceneInfoRsp__storage_, reportName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMReportSceneInfoRsp class]
                                     rootClass:[DLMProtobufCommonRoot class]
                                          file:DLMProtobufCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMReportSceneInfoRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMSubmitReportReq

@implementation DLMSubmitReportReq

@dynamic reportId;
@dynamic reportDesc;
@dynamic imagesArray, imagesArray_Count;

typedef struct DLMSubmitReportReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t reportId;
  NSString *reportDesc;
  NSMutableArray *imagesArray;
} DLMSubmitReportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reportId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSubmitReportReq_FieldNumber_ReportId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMSubmitReportReq__storage_, reportId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reportDesc",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSubmitReportReq_FieldNumber_ReportDesc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMSubmitReportReq__storage_, reportDesc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DLMReportImageReq),
        .number = DLMSubmitReportReq_FieldNumber_ImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DLMSubmitReportReq__storage_, imagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMSubmitReportReq class]
                                     rootClass:[DLMProtobufCommonRoot class]
                                          file:DLMProtobufCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMSubmitReportReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\005\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMReportImageListReq

@implementation DLMReportImageListReq

@dynamic imagesArray, imagesArray_Count;

typedef struct DLMReportImageListReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *imagesArray;
} DLMReportImageListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DLMReportImageReq),
        .number = DLMReportImageListReq_FieldNumber_ImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DLMReportImageListReq__storage_, imagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMReportImageListReq class]
                                     rootClass:[DLMProtobufCommonRoot class]
                                          file:DLMProtobufCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMReportImageListReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMReportImageReq

@implementation DLMReportImageReq

@dynamic thumbURL;
@dynamic imgURL;
@dynamic width;
@dynamic height;

typedef struct DLMReportImageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  NSString *thumbURL;
  NSString *imgURL;
} DLMReportImageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "thumbURL",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMReportImageReq_FieldNumber_ThumbURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMReportImageReq__storage_, thumbURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgURL",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMReportImageReq_FieldNumber_ImgURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMReportImageReq__storage_, imgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMReportImageReq_FieldNumber_Width,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMReportImageReq__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMReportImageReq_FieldNumber_Height,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMReportImageReq__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMReportImageReq class]
                                     rootClass:[DLMProtobufCommonRoot class]
                                          file:DLMProtobufCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMReportImageReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006!!\000\002\004!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMVerifyCodeReq

@implementation DLMVerifyCodeReq

@dynamic verifyType;

typedef struct DLMVerifyCodeReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t verifyType;
} DLMVerifyCodeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "verifyType",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMVerifyCodeReq_FieldNumber_VerifyType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMVerifyCodeReq__storage_, verifyType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMVerifyCodeReq class]
                                     rootClass:[DLMProtobufCommonRoot class]
                                          file:DLMProtobufCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMVerifyCodeReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMVerifyCodeRsp

@implementation DLMVerifyCodeRsp

@dynamic verifyId;

typedef struct DLMVerifyCodeRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *verifyId;
} DLMVerifyCodeRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "verifyId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMVerifyCodeRsp_FieldNumber_VerifyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMVerifyCodeRsp__storage_, verifyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMVerifyCodeRsp class]
                                     rootClass:[DLMProtobufCommonRoot class]
                                          file:DLMProtobufCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMVerifyCodeRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMCheckVerifyCodeReq

@implementation DLMCheckVerifyCodeReq

@dynamic verifyId;
@dynamic verifyCode;

typedef struct DLMCheckVerifyCodeReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *verifyId;
  NSString *verifyCode;
} DLMCheckVerifyCodeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "verifyId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMCheckVerifyCodeReq_FieldNumber_VerifyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMCheckVerifyCodeReq__storage_, verifyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "verifyCode",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMCheckVerifyCodeReq_FieldNumber_VerifyCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMCheckVerifyCodeReq__storage_, verifyCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMCheckVerifyCodeReq class]
                                     rootClass:[DLMProtobufCommonRoot class]
                                          file:DLMProtobufCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMCheckVerifyCodeReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMCheckVerifyCodeRsp

@implementation DLMCheckVerifyCodeRsp

@dynamic certifyId;

typedef struct DLMCheckVerifyCodeRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *certifyId;
} DLMCheckVerifyCodeRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "certifyId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMCheckVerifyCodeRsp_FieldNumber_CertifyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMCheckVerifyCodeRsp__storage_, certifyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMCheckVerifyCodeRsp class]
                                     rootClass:[DLMProtobufCommonRoot class]
                                          file:DLMProtobufCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMCheckVerifyCodeRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
