// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufFriend.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ProtobufFriend.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DLMFriendApplyInfoRsp);
GPBObjCClassDeclaration(DLMUserFriendInfoRsp);

#pragma mark - DLMProtobufFriendRoot

@implementation DLMProtobufFriendRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - DLMProtobufFriendRoot_FileDescriptor

static GPBFileDescriptor *DLMProtobufFriendRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.github.ld.chat.protobuf"
                                                 objcPrefix:@"DLM"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DLMAddFriendApplyReq

@implementation DLMAddFriendApplyReq

@dynamic friendUserId;
@dynamic remarks;
@dynamic reqType;

typedef struct DLMAddFriendApplyReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t reqType;
  NSString *remarks;
  uint64_t friendUserId;
} DLMAddFriendApplyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMAddFriendApplyReq_FieldNumber_FriendUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMAddFriendApplyReq__storage_, friendUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "remarks",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMAddFriendApplyReq_FieldNumber_Remarks,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMAddFriendApplyReq__storage_, remarks),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reqType",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMAddFriendApplyReq_FieldNumber_ReqType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMAddFriendApplyReq__storage_, reqType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMAddFriendApplyReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMAddFriendApplyReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\014\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMApproveFriendReq

@implementation DLMApproveFriendReq

@dynamic friendApplyId;

typedef struct DLMApproveFriendReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t friendApplyId;
} DLMApproveFriendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendApplyId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMApproveFriendReq_FieldNumber_FriendApplyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMApproveFriendReq__storage_, friendApplyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMApproveFriendReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMApproveFriendReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMBlockFriendReq

@implementation DLMBlockFriendReq

@dynamic friendUserId;
@dynamic black;

typedef struct DLMBlockFriendReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t black;
  uint64_t friendUserId;
} DLMBlockFriendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMBlockFriendReq_FieldNumber_FriendUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMBlockFriendReq__storage_, friendUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "black",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMBlockFriendReq_FieldNumber_Black,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMBlockFriendReq__storage_, black),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMBlockFriendReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMBlockFriendReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMChatBackgroundReq

@implementation DLMChatBackgroundReq

@dynamic targetId;
@dynamic msgType;
@dynamic background;

typedef struct DLMChatBackgroundReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgType;
  NSString *background;
  uint64_t targetId;
} DLMChatBackgroundReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMChatBackgroundReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMChatBackgroundReq__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMChatBackgroundReq_FieldNumber_MsgType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMChatBackgroundReq__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "background",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMChatBackgroundReq_FieldNumber_Background,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMChatBackgroundReq__storage_, background),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMChatBackgroundReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMChatBackgroundReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMContactListReq

@implementation DLMContactListReq

@dynamic lastPullTime;

typedef struct DLMContactListReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t lastPullTime;
} DLMContactListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastPullTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMContactListReq_FieldNumber_LastPullTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMContactListReq__storage_, lastPullTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMContactListReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMContactListReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMDelFriendApplyReq

@implementation DLMDelFriendApplyReq

@dynamic friendApplyId;

typedef struct DLMDelFriendApplyReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t friendApplyId;
} DLMDelFriendApplyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendApplyId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMDelFriendApplyReq_FieldNumber_FriendApplyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMDelFriendApplyReq__storage_, friendApplyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMDelFriendApplyReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMDelFriendApplyReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMDelFriendReq

@implementation DLMDelFriendReq

@dynamic friendUserId;

typedef struct DLMDelFriendReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t friendUserId;
} DLMDelFriendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMDelFriendReq_FieldNumber_FriendUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMDelFriendReq__storage_, friendUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMDelFriendReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMDelFriendReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMRejectFriendApplyReq

@implementation DLMRejectFriendApplyReq

@dynamic friendApplyId;

typedef struct DLMRejectFriendApplyReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t friendApplyId;
} DLMRejectFriendApplyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendApplyId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMRejectFriendApplyReq_FieldNumber_FriendApplyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMRejectFriendApplyReq__storage_, friendApplyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMRejectFriendApplyReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMRejectFriendApplyReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMClearFriendApplyReq

@implementation DLMClearFriendApplyReq


typedef struct DLMClearFriendApplyReq__storage_ {
  uint32_t _has_storage_[1];
} DLMClearFriendApplyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMClearFriendApplyReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DLMClearFriendApplyReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMUserFriendBlockReq

@implementation DLMUserFriendBlockReq

@dynamic lastPullTime;

typedef struct DLMUserFriendBlockReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t lastPullTime;
} DLMUserFriendBlockReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastPullTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendBlockReq_FieldNumber_LastPullTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMUserFriendBlockReq__storage_, lastPullTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMUserFriendBlockReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMUserFriendBlockReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMFriendApplyInfoReq

@implementation DLMFriendApplyInfoReq

@dynamic friendApplyId;

typedef struct DLMFriendApplyInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t friendApplyId;
} DLMFriendApplyInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendApplyId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyInfoReq_FieldNumber_FriendApplyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMFriendApplyInfoReq__storage_, friendApplyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMFriendApplyInfoReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMFriendApplyInfoReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMFriendApplyReq

@implementation DLMFriendApplyReq

@dynamic lastApplyTime;

typedef struct DLMFriendApplyReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t lastApplyTime;
} DLMFriendApplyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastApplyTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyReq_FieldNumber_LastApplyTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMFriendApplyReq__storage_, lastApplyTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMFriendApplyReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMFriendApplyReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMFriendApplyListRsp

@implementation DLMFriendApplyListRsp

@dynamic friendApplysArray, friendApplysArray_Count;

typedef struct DLMFriendApplyListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *friendApplysArray;
} DLMFriendApplyListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendApplysArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DLMFriendApplyInfoRsp),
        .number = DLMFriendApplyListRsp_FieldNumber_FriendApplysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DLMFriendApplyListRsp__storage_, friendApplysArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMFriendApplyListRsp class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMFriendApplyListRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000friendApplys\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMFriendApplyInfoRsp

@implementation DLMFriendApplyInfoRsp

@dynamic id_p;
@dynamic applyUserId;
@dynamic applyOpenId;
@dynamic headImg;
@dynamic nickName;
@dynamic applyStatus;
@dynamic remarks;
@dynamic applyTime;

typedef struct DLMFriendApplyInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t applyStatus;
  NSString *applyOpenId;
  NSString *headImg;
  NSString *nickName;
  NSString *remarks;
  uint64_t id_p;
  uint64_t applyUserId;
  uint64_t applyTime;
} DLMFriendApplyInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyInfoRsp_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMFriendApplyInfoRsp__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "applyUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyInfoRsp_FieldNumber_ApplyUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMFriendApplyInfoRsp__storage_, applyUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "applyOpenId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyInfoRsp_FieldNumber_ApplyOpenId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMFriendApplyInfoRsp__storage_, applyOpenId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImg",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyInfoRsp_FieldNumber_HeadImg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMFriendApplyInfoRsp__storage_, headImg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyInfoRsp_FieldNumber_NickName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DLMFriendApplyInfoRsp__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "applyStatus",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyInfoRsp_FieldNumber_ApplyStatus,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DLMFriendApplyInfoRsp__storage_, applyStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remarks",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyInfoRsp_FieldNumber_Remarks,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DLMFriendApplyInfoRsp__storage_, remarks),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "applyTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyInfoRsp_FieldNumber_ApplyTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DLMFriendApplyInfoRsp__storage_, applyTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMFriendApplyInfoRsp class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMFriendApplyInfoRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\002\013\000\003\013\000\004\007\000\005\010\000\006\013\000\010\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMFriendApplyNumReq

@implementation DLMFriendApplyNumReq


typedef struct DLMFriendApplyNumReq__storage_ {
  uint32_t _has_storage_[1];
} DLMFriendApplyNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMFriendApplyNumReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DLMFriendApplyNumReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMFriendApplyNumRsp

@implementation DLMFriendApplyNumRsp

@dynamic friendApplyNum;

typedef struct DLMFriendApplyNumRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t friendApplyNum;
} DLMFriendApplyNumRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendApplyNum",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendApplyNumRsp_FieldNumber_FriendApplyNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMFriendApplyNumRsp__storage_, friendApplyNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMFriendApplyNumRsp class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMFriendApplyNumRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMFriendRemarkReq

@implementation DLMFriendRemarkReq

@dynamic friendUserId;
@dynamic remark;

typedef struct DLMFriendRemarkReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *remark;
  uint64_t friendUserId;
} DLMFriendRemarkReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendRemarkReq_FieldNumber_FriendUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMFriendRemarkReq__storage_, friendUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "remark",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMFriendRemarkReq_FieldNumber_Remark,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMFriendRemarkReq__storage_, remark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMFriendRemarkReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMFriendRemarkReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMMsgAlertReq

@implementation DLMMsgAlertReq

@dynamic friendUserId;
@dynamic alert;

typedef struct DLMMsgAlertReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t alert;
  uint64_t friendUserId;
} DLMMsgAlertReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMsgAlertReq_FieldNumber_FriendUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMMsgAlertReq__storage_, friendUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "alert",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMsgAlertReq_FieldNumber_Alert,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMMsgAlertReq__storage_, alert),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMMsgAlertReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMMsgAlertReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMMuteNoticeReq

@implementation DLMMuteNoticeReq

@dynamic targetId;
@dynamic msgType;
@dynamic muteNotice;

typedef struct DLMMuteNoticeReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgType;
  int32_t muteNotice;
  uint64_t targetId;
} DLMMuteNoticeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMuteNoticeReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMMuteNoticeReq__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMuteNoticeReq_FieldNumber_MsgType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMMuteNoticeReq__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "muteNotice",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMMuteNoticeReq_FieldNumber_MuteNotice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMMuteNoticeReq__storage_, muteNotice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMMuteNoticeReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMMuteNoticeReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\007\000\003\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMStarFriendReq

@implementation DLMStarFriendReq

@dynamic friendUserId;
@dynamic star;

typedef struct DLMStarFriendReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t star;
  uint64_t friendUserId;
} DLMStarFriendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMStarFriendReq_FieldNumber_FriendUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMStarFriendReq__storage_, friendUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "star",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMStarFriendReq_FieldNumber_Star,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMStarFriendReq__storage_, star),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMStarFriendReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMStarFriendReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMUserFriendAuthReq

@implementation DLMUserFriendAuthReq

@dynamic friendUserId;

typedef struct DLMUserFriendAuthReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t friendUserId;
} DLMUserFriendAuthReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendAuthReq_FieldNumber_FriendUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMUserFriendAuthReq__storage_, friendUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMUserFriendAuthReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMUserFriendAuthReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMStickyOnTopReq

@implementation DLMStickyOnTopReq

@dynamic targetId;
@dynamic msgType;
@dynamic top;

typedef struct DLMStickyOnTopReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgType;
  int32_t top;
  uint64_t targetId;
} DLMStickyOnTopReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMStickyOnTopReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMStickyOnTopReq__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMStickyOnTopReq_FieldNumber_MsgType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMStickyOnTopReq__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "top",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMStickyOnTopReq_FieldNumber_Top,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMStickyOnTopReq__storage_, top),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMStickyOnTopReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMStickyOnTopReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMUserFriendListReq

@implementation DLMUserFriendListReq

@dynamic lastPullTime;

typedef struct DLMUserFriendListReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t lastPullTime;
} DLMUserFriendListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastPullTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendListReq_FieldNumber_LastPullTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMUserFriendListReq__storage_, lastPullTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMUserFriendListReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMUserFriendListReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMSearchFriendReq

@implementation DLMSearchFriendReq

@dynamic accountNo;

typedef struct DLMSearchFriendReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountNo;
} DLMSearchFriendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountNo",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMSearchFriendReq_FieldNumber_AccountNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMSearchFriendReq__storage_, accountNo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMSearchFriendReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMSearchFriendReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMUserFriendListRsp

@implementation DLMUserFriendListRsp

@dynamic friendsArray, friendsArray_Count;

typedef struct DLMUserFriendListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *friendsArray;
} DLMUserFriendListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DLMUserFriendInfoRsp),
        .number = DLMUserFriendListRsp_FieldNumber_FriendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DLMUserFriendListRsp__storage_, friendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMUserFriendListRsp class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMUserFriendListRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMUserFriendInfoReq

@implementation DLMUserFriendInfoReq

@dynamic friendUserId;

typedef struct DLMUserFriendInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t friendUserId;
} DLMUserFriendInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoReq_FieldNumber_FriendUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoReq__storage_, friendUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMUserFriendInfoReq class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMUserFriendInfoReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DLMUserFriendInfoRsp

@implementation DLMUserFriendInfoRsp

@dynamic userId;
@dynamic openId;
@dynamic nickName;
@dynamic remark;
@dynamic email;
@dynamic regionName;
@dynamic sign;
@dynamic sex;
@dynamic sexValue;
@dynamic headImg;
@dynamic qrCode;
@dynamic friend_p;
@dynamic black;
@dynamic top;
@dynamic muteNotice;
@dynamic background;
@dynamic initials;
@dynamic alert;
@dynamic star;
@dynamic status;
@dynamic sendTime;
@dynamic myQrCode;
@dynamic contactCard;

typedef struct DLMUserFriendInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  int32_t black;
  int32_t top;
  int32_t muteNotice;
  int32_t alert;
  int32_t star;
  int32_t status;
  NSString *openId;
  NSString *nickName;
  NSString *remark;
  NSString *email;
  NSString *regionName;
  NSString *sign;
  NSString *sexValue;
  NSString *headImg;
  NSString *qrCode;
  NSString *background;
  NSString *initials;
  uint64_t userId;
  uint64_t sendTime;
} DLMUserFriendInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "openId",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_OpenId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, openId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Remark,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, remark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Email,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "regionName",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_RegionName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, regionName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Sign,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Sex,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sexValue",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_SexValue,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, sexValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImg",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_HeadImg,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, headImg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "qrCode",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_QrCode,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, qrCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friend_p",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Friend_p,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "black",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Black,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, black),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "top",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Top,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, top),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "muteNotice",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_MuteNotice,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, muteNotice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "background",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Background,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, background),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "initials",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Initials,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, initials),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alert",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Alert,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, alert),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "star",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Star,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, star),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_Status,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_SendTime,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(DLMUserFriendInfoRsp__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "myQrCode",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_MyQrCode,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "contactCard",
        .dataTypeSpecific.clazz = Nil,
        .number = DLMUserFriendInfoRsp_FieldNumber_ContactCard,
        .hasIndex = 24,
        .offset = 25,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DLMUserFriendInfoRsp class]
                                     rootClass:[DLMProtobufFriendRoot class]
                                          file:DLMProtobufFriendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DLMUserFriendInfoRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001\006\000\002\006\000\003\010\000\006\n\000\t\010\000\n\007\000\013\006\000\017\n\000\025\010\000\026\010\000\027\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
